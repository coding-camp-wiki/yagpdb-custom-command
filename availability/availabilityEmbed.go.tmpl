{{ $settings := (sdict
    "title" "Staff In/Out"
    "color" 12426513
    "description" "Which staff members are currently available to help?"

    "fieldNameAvailable" "Ready to Help!"
    "fieldNameAway" "Away"
    "fieldValueEmpty" "(none)"

    "emojiAvailable" "âœ…"
    "emojiAway" "ðŸ›‘"
    "emojiReset" "ðŸ”„"

    "showFieldInline" true
) }}

{{/* {{ $fieldValueAvailable := $settings.fieldValueEmpty }} */}}
{{ $fieldValueAvailable := "Carl" }}
{{/* {{ $fieldValueAway := $settings.fieldValueEmpty }} */}}
{{ $fieldValueAway := "Scout\nYAG" }}

{{ $emojiSet := cslice
    $settings.emojiAvailable
    $settings.emojiAway
    $settings.emojiReset
}}

{{ $reactMessageId := .ExecData.messageId }}
{{ $reactEmoji := .ExecData.emoji }}
{{ $isReactionAdded := .ExecData.isReactionAdded }}
{{ $reactUserId := .ExecData.userId }}
{{ $reactUser := userArg $reactUserId }}

{{ define "embedDict" }}
    {{ $fieldAvailable := (sdict
        "name" .settings.fieldNameAvailable
        "value" .available
        "inline" .settings.showFieldInline
    ) }}

    {{ $fieldAway := (sdict
        "name" .settings.fieldNameAway
        "value" .away
        "inline" .settings.showFieldInline
    ) }}

    {{ $fields := (cslice
            $fieldAvailable
            $fieldAway
        )
    }}

    {{ .Set "result" (sdict
        "title" .settings.title
        "color" .settings.color
        "description" .settings.description
        "fields" $fields
    ) }}
{{ end }}

{{/* initial setup */}}
{{ if not .ExecData }}
    {{ template "embedDict" ($embedDict := sdict
        "settings" $settings
        "available" $fieldValueAvailable
        "away" $fieldValueAway
    ) }}

    {{ $embed := cembed $embedDict.result }}

    {{ $messageId := sendMessageRetID nil $embed }}

    {{ range $emojiSet }}
        {{ addMessageReactions nil $messageId . }}
    {{ end }}

    {{ deleteTrigger 1 }}

{{/* update existing embed, if present, based on expected emojis */}}
{{ else if and (in $emojiSet $reactEmoji) ($isReactionAdded) }}
    {{ $reactMessage := getMessage nil $reactMessageId }}

    {{ range $index, $embed := $reactMessage.Embeds }}
        {{ if eq $embed.Title $settings.title }}
            {{/* get current field values */}}
            {{ range $embed.Fields }}
                {{ if eq .Name $settings.fieldNameAvailable }}
                    {{ $fieldValueAvailable = .Value }}
                {{ else if eq .Name $settings.fieldNameAway }}
                    {{ $fieldValueAway = .Value }}
                {{ end }}
            {{ end }}

            {{/* add to available */}}
            {{ if eq $reactEmoji $settings.emojiAvailable }}
                {{/* replace empty */}}
                {{ if eq $fieldValueAvailable $settings.fieldValueEmpty }}
                    {{ $fieldValueAvailable = $reactUser.Mention }}

                {{/* else keep existing and add to */}}
                {{ else }}
                    {{ $split := split $fieldValueAvailable "\n" }}

                    {{ if not (in $split $reactUser.Mention) }}
                        {{ $fieldValueAvailable = joinStr "\n" $split $reactUser.Mention }}
                    {{ end }}
                {{ end }}

                {{/* update opposite list */}}
                {{ $fieldValueAway = reReplace $reactUser.Mention $fieldValueAway "" }}

                {{/* if no names remaning, set to empty value */}}
                {{ if not $fieldValueAway }}
                    {{ $fieldValueAway = $settings.fieldValueEmpty }}
                {{ end }}

            {{/* add to away */}}
            {{ else if eq $reactEmoji $settings.emojiAway }}
                {{/* replace empty */}}
                {{ if eq $fieldValueAway $settings.fieldValueEmpty }}
                    {{ $fieldValueAway = $reactUser.Mention }}

                {{/* else keep existing and add to */}}
                {{ else }}
                    {{ $split := split $fieldValueAway "\n" }}

                    {{ if not (in $split $reactUser.Mention) }}
                        {{ $fieldValueAway = joinStr "\n" $split $reactUser.Mention }}
                    {{ end }}
                {{ end }}

                {{/* update opposite list */}}
                {{ $fieldValueAvailable = reReplace $reactUser.Mention $fieldValueAvailable "" }}

                {{/* if no names remaning, set to empty value */}}
                {{ if not $fieldValueAvailable }}
                    {{ $fieldValueAvailable = $settings.fieldValueEmpty }}
                {{ end }}

            {{/* reset */}}
            {{ else if eq $reactEmoji $settings.emojiReset }}
                {{ $fieldValueAvailable = $settings.fieldValueEmpty }}
                {{ $fieldValueAway = $settings.fieldValueEmpty }}
            {{ end }}

            {{ template "embedDict" ($embedDict := sdict
                "settings" $settings
                "available" $fieldValueAvailable
                "away" $fieldValueAway
            ) }}

            {{ editMessage nil $reactMessageId (complexMessageEdit "embed" $embedDict.result) }}
        {{ end }}
    {{ end }}
{{ end }}

{{ if $isReactionAdded }}
    {{ deleteMessageReaction nil $reactMessageId $reactUserId $reactEmoji }}
{{ end }}
